name: Deploy Frontend

on:
  workflow_run:
    workflows: ["Build Infrastructure via Terraform"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    # Only run if the terraform workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Backend URL and Check Health
        id: backend
        run: |
          # Get the App Runner URL using AWS CLI
          APP_RUNNER_URL=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='mern-simple-app'].ServiceUrl" --output text)
          echo "APP_RUNNER_URL=https://$APP_RUNNER_URL" >> $GITHUB_ENV

          # Wait for backend to be ready (retry for 5 minutes)
          for i in {1..30}; do
            if curl -s "$APP_RUNNER_URL/api/products" > /dev/null; then
              echo "Backend is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Backend failed to respond"
              exit 1
            fi
            echo "Waiting for backend to be ready... ($i/30)"
            sleep 10
          done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install Dependencies
        run: npm ci

      - name: Build Frontend
        env:
          VITE_API_URL: ${{ env.APP_RUNNER_URL }}
        run: npm run build

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://sample-frontend-bucket --delete

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, 'sample-frontend-bucket')].Id" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
