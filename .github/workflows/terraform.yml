name: Build Infrastructure via Terraform

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed
    branches: [main]
  push:
    branches: [main]
    paths:
      - "infra/**"
      - ".github/workflows/terraform.yml"
  pull_request:
    branches: [main]
    paths:
      - "infra/**"
      - ".github/workflows/terraform.yml"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.plan.outputs.changes }}
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Check and Release State Lock
        run: |
          # Get the current lock info
          LOCK_INFO=$(aws dynamodb get-item \
            --table-name ${{ vars.TF_LOCK_TABLE }} \
            --key '{"LockID": {"S": "terraform-state-bucket-majid/s3-deployment/terraform.tfstate"}}' \
            --query 'Item' \
            --output json)

          if [ ! -z "$LOCK_INFO" ]; then
            echo "Found existing lock. Checking age..."
            LOCK_TIME=$(echo $LOCK_INFO | jq -r '.Info.S')
            CURRENT_TIME=$(date +%s)
            LOCK_AGE=$((CURRENT_TIME - $(date -d "$LOCK_TIME" +%s)))

            # If lock is older than 15 minutes, force unlock
            if [ $LOCK_AGE -gt 900 ]; then
              echo "Lock is older than 15 minutes. Force unlocking..."
              terraform force-unlock -force "$(echo $LOCK_INFO | jq -r '.ID.S')"
            fi
          fi

      - name: Terraform Init
        id: init
        run: |
          for i in {1..3}; do
            if terraform init \
              -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
              -backend-config="key=${{ vars.TF_STATE_KEY }}" \
              -backend-config="region=${{ vars.AWS_REGION }}" \
              -backend-config="dynamodb_table=${{ vars.TF_LOCK_TABLE }}"; then
              break
            fi
            echo "Init failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          for i in {1..3}; do
            # Exclude ECR repository from plan if it exists
            if aws ecr describe-repositories --repository-names "${{ vars.PROJECT_NAME }}-backend" 2>/dev/null; then
              if terraform plan -detailed-exitcode -no-color -target="!aws_ecr_repository.backend" -lock-timeout=5m; then
                echo "changes=$?" >> $GITHUB_OUTPUT
                break
              fi
            else
              if terraform plan -detailed-exitcode -no-color -lock-timeout=5m; then
                echo "changes=$?" >> $GITHUB_OUTPUT
                break
              fi
            fi
            if [ $i -eq 3 ]; then
              echo "Plan failed after 3 retries"
              exit 1
            fi
            echo "Plan failed, retrying in 30 seconds..."
            sleep 30
          done
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.workflow_run.conclusion == 'success')
        run: |
          for i in {1..3}; do
            # Exclude ECR repository from apply if it exists
            if aws ecr describe-repositories --repository-names "${{ vars.PROJECT_NAME }}-backend" 2>/dev/null; then
              if terraform apply -auto-approve -target="!aws_ecr_repository.backend" -lock-timeout=5m \
                -var="docdb_master_username=${{ secrets.TF_VAR_docdb_master_username }}" \
                -var="docdb_master_password=${{ secrets.TF_VAR_docdb_master_password }}"; then
                break
              fi
            else
              if terraform apply -auto-approve -lock-timeout=5m \
                -var="docdb_master_username=${{ secrets.TF_VAR_docdb_master_username }}" \
                -var="docdb_master_password=${{ secrets.TF_VAR_docdb_master_password }}"; then
                break
              fi
            fi
            if [ $i -eq 3 ]; then
              echo "Apply failed after 3 retries"
              exit 1
            fi
            echo "Apply failed, retrying in 30 seconds..."
            sleep 30
          done
